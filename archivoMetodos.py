# metodo: diccionario con los siguientes campos
#     id: string descriptivo del metodo
#     comment: descripcion mas extensa de la tarea que realiza el metodo
#     minLado: minimo tamaño de cubo para procesar con este metodo
#     important: Verdadero si el algoritmo no es trivial y es importante para memorizar
#     modo: 'Repeat', 'Once', 'Twice', '<n> Times', 'Best Match'
#     rangoI, rangoJ, rangoK: strings especificando un rango de iteracion del metodo para i, j, k respectivamente
#              - Cada uno de especifica como <desde>:<hasta>.
#              - <desde> y <hasta> son expresiones iguales a las especificadas para las coordenadas salvo que
#                NO pueden incluir las variables i,j,k. Solo constantes y numeros (cualquier operacion entre ellos)
#              - Si hay definidas iteraciones, y solo para las variables que esten definidas, el metodo se ejecuta
#                manteniendo variables globales i, j, k. La iteracion es
#                            for i = desde to hasta
#                                 for j = desde to hasta
#                                       for k = desde to hasta
#                                             ejecutar el metodo (y sus submetodos)
#                las variables i, j, k se reemplazan en las condiciones y algoritmos donde aparezcan
#     subMetodos: (idSubMetodo1, idSubMetodo2, idSubMetodo3, ....)
#     until1st: '-', 'Failure', 'Success' (ejecuta todos los submetodos o hasta el 1ro que falle o el 1ro que tenga exito)
#     listaCondiciones: (cond1, cond2, cond3, .... ) # por claridad solo especificar subMetodos o listaCondiciones pero no ambas...
#          condicion: <cara>.<rango filas>.<rango columnas>.<colores posibles>
#                cara: U, D, F, B, L, R (Up, Down, Front, Back, Left, Right)
#                rango filas/columnas: <coord desde>[:<coord hasta>]
#                     coord desde/ coord hasta: coordenada dentro de la cara, (1,1) es el angulo superior izquierdo
#                              - Ver especificacion de coordenadas mas abajo.
#                colores posibles: uno o varios colores separados por espacios, con que uno coincida se considera que hay coincidencia. Cada uno puede ser:
#                    - un color específico (white, yellow, red, orange, blue, green)
#                    - "->nombre" asigna el color de la celda a una variable llamada "nombre"
#                    - "=>nombre" asigna el color de la celda a una variable global llamada "nombre"
#                    - "==nombre" el color de la celda debe coincidir con el PREVIAMENTE ASIGNADO a la variable "nombre"
#                    - "!=nombre" el color de la celda debe ser distinto al PREVIAMENTE ASIGNADO a la variable "nombre"
#                    - "c=nombre1[,nombre2]" el color de la celda debe encontrarse a continuacion de los especificados 
#                      en las variables nombre1 y nombre2 en sentido horario dentro de este cubo ("c"lockwise).
#                      si se especifica un solo nombre, debe ser uno de los posibles siguientes en ese sentido (todos
#                      los demas excepto el de la cara opuesta o él mismo)
#                    - "a=nombre1[,nombre2]" idem anterior pero en sentido antihorario ("a"nticlockwise)
#                    - "o=nombre" el color de la celda debe coincidir con el correspondiente al opuesto (dentro de este cubo)
#                      al especificado en "nombre"
#                    - c!, a!, o! son las negaciones de c=, a= y o=
#          - Las condiciones se deben cumplir TODAS para que se ejecute el algoritmo.
#          - Cada condicion puede ser un string de la forma:
#                 'OR <cond1>,<cond2>,<cond3>....' en ese caso la condicion se cumple si ALGUNA se cumple
#     mirror: True si las condiciones se deben chequear tambien en espejo, si no, False.
#     posiciones: Lista de posiciones del cubo en que se buscan las condiciones. Cada posicion es un string con
#                 uno o varios movimientos simples separados por espacios. Los movimientos pueden ser: X Y Z U D F B L R
#                 con ' o 2 para los inversos o dobles respectivamente. El movimiento nulo es "-"
#                 Las condiciones se buscan en un cubo al que previemente se le hicieron estos movimientos a la 
#                 inversa, antes de ejecutar el algoritmo se ejecuta el movimiento correspondiente a la posicion 
#                 en que se encontraron las condiciones.
#     algoritmo: String con uno o varios movimientos separados por espacios. Cada movimientos puede tener la notacion
#                estandar de rubik (F,B,U,D,L,R,M,E,S,x,y,z,minusculas,w,',2)
#                o bien ser de la forma <idCara>[.<coord desde>[:<coord hasta>]].<direccion> donde:
#                <idCara> = "F", "B", "U", "D", "L" o "R"
#                <coord desde> y <coord hasta> = numero de fila/columna a mover (desde y hasta son inclusive)
#                    - Las coordenadas se especifican segun las reglas descriptas mas abajo.
#                    - Por cuestiones de simetría T y L (tambien B y R) son equivalentes, se incluyen solo
#                      para dar claridad a la escritura de movimientos pero la direccion del movimiento esta dada
#                      SOLO por el campo “direccion”.
#                    - El orden de <coord desde> y <coord hasta> es indistinto (2:5 es equivalente a 5:2)
#                <direccion> = "u", "d", "l", "r", "c", "a" para up, down, left, right, clockwise y anticlockwise
#                    - si la direccion es clockwise o anticlockwise <rango desde>:<rango hasta> se omite / ignora
#                    - se puede anteponer a la letra de direccion un digito multiplicador, 
#                         el movimiento se realizara esa cantidad de veces 
#                         1: default,    2: el mas logico de usar,    3: raro,    >3: ridiculo
#                cualquier movimiento que comience con '><' se considera espejado respecto a un plano definido por 
#                los ejes Z e Y
#
# En todos los casos las coordenadas se definen como una expresion numerica que puede contener variables o 
# constantes segun se especifica a continuacion:
#      - Numeros explicitos indican una fila/columna se cuenta desde la izquierda/arriba (no recomendado)
#      - La numeracion va desde 1 a n siendo n el tamaño del cubo
#      - En las expresiones numericas se pueden incluir las siguientes constantes:
#          - 'T' o 'L' (Top/Left) indican la 1ra fla/columna (son equivalentes a 1)
#          - 't' o 'l' (top/left) indican la 2da fla/columna (son equivalentes a 2)
#          - 'B' o 'R' (Bottom/Right) indican la última fla/columna (tamaño del cubo)
#          - 'b' o 'r' (bottom/right) indican la penúltima fla/columna (tamaño del cubo - 1)
#          - 'c' o 'C' (Center) indican la fla/columna central
#               en cubos impares c y C son equivalentes
#               en cubos pares c y C son la coordenada menor y mayor de las 2 centrales
#      - En las expresiones numericas tambien de pueden incluir las variables i, j, k en los metodos que se ejecuten
#        iterando esas variables, segun lo descripto arriba.
#           ejemplos: T, b, T+1, R-2, T+i-1, b-k+2, c+j o C+j


HARD_METHODS = {
    "Standard": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "STD Centros 1",
            "STD Centros 2",
            "STD Aristas",
            "3x3 Standard",
            "Check Armado"
        ],
        "until1st": "Failure",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "Armar el cubo con los movimientos standard que se encuentran en cualquier pagina de armado"
    },
    "STD Nucleos (pares)": {
        "comment": "En cubos pares, armar el nucleo (las 2x2 celdas centrales de cada cara)",
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [
            "STD Nucleos Elegir color Up y color Right",
            "STD Nucleos (acomodar 1)",
            "STD Nucleos Frente 1",
            "STD Nucleos Frente 2",
            "STD Nucleos (acomodar 2)",
            "STD Nucleos (frente es right)",
            "STD Nucleos Frente 1",
            "STD Nucleos Frente 2",
            "STD Nucleos (acomodar 2)",
            "STD Nucleos (frente es right)",
            "STD Nucleos Frente 1",
            "STD Nucleos Frente 2",
            "STD Nucleos (acomodar 2)",
            "STD Nucleos (frente es right)",
            "STD Nucleos Frente 1",
            "STD Nucleos Frente 2",
            "STD Nucleos (acomodar 2)",
            "STD Nucleos (frente es up)",
            "STD Nucleos Frente 1",
            "STD Nucleos Frente 2"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "important": False
    },
    "STD Nucleos Elegir color Up y color Right": {
        "comment": "determinar los colores de la cara superior y derecha de la que quiero armar",
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.R. =>colorUp",
            "R.T.L. =>colorRight"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": ""
    },
    "STD Nucleos (acomodar 1)": {
        "comment": "buscar una cara con muchas celdas iguales al color que quiero armar",
        "modo": "Best Match",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c:C.c:C. c=colorUp,colorRight"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "",
            "X",
            "X'"
        ],
        "algoritmo": ""
    },
    "STD Nucleos Frente 1": {
        "comment": "armar en el frente el nucleo correspondiente a tener arriba y a la derecha colorUp y colorRight",
        "modo": "Repeat",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c. c!colorUp,colorRight",
            "U.C.C. c=colorUp,colorRight"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "F",
            "F U",
            "F U'",
            "F U2",
            "F'",
            "F' U",
            "F' U'",
            "F' U2",
            "F2",
            "F2 U",
            "F2 U'",
            "F2 U2",
            "Z ",
            "Z U",
            "Z U'",
            "Z U2",
            "Z F",
            "Z F U",
            "Z F U'",
            "Z F U2",
            "Z F'",
            "Z F' U",
            "Z F' U'",
            "Z F' U2",
            "Z F2",
            "Z F2 U",
            "Z F2 U'",
            "Z F2 U2",
            "Z' ",
            "Z' U",
            "Z' U'",
            "Z' U2",
            "Z' F",
            "Z' F U",
            "Z' F U'",
            "Z' F U2",
            "Z' F'",
            "Z' F' U",
            "Z' F' U'",
            "Z' F' U2",
            "Z' F2",
            "Z' F2 U",
            "Z' F2 U'",
            "Z' F2 U2",
            "Z2 ",
            "Z2 U",
            "Z2 U'",
            "Z2 U2",
            "Z2 F",
            "Z2 F U",
            "Z2 F U'",
            "Z2 F U2",
            "Z2 F'",
            "Z2 F' U",
            "Z2 F' U'",
            "Z2 F' U2",
            "Z2 F2",
            "Z2 F2 U",
            "Z2 F2 U'",
            "Z2 F2 U2"
        ],
        "algoritmo": "F.C:R.d F F.C:R.u",
        "important": True
    },
    "STD Nucleos Frente 2": {
        "comment": "traer al frente las celdas que me sirvan desde la cara de atras",
        "modo": "Repeat",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c. c!colorUp,colorRight",
            "B.c.c. c=colorUp,colorRight"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "B",
            "B'",
            "B2",
            "F",
            "F B",
            "F B'",
            "F B2",
            "F'",
            "F' B",
            "F' B'",
            "F' B2",
            "F2",
            "F2 B",
            "F2 B'",
            "F2 B2"
        ],
        "algoritmo": "F.C:R.2d F F.C:R.2u",
        "important": True
    },
    "STD Nucleos (acomodar 2)": {
        "comment": "buscar una cara con muchas celdas iguales en su nucleo que pueda ser contigua a colorFrente",
        "modo": "Best Match",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "R.C.c.==colorRight"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "Z",
            "Z'",
            "Z2"
        ],
        "algoritmo": ""
    },
    "STD Nucleos (frente es right)": {
        "comment": "el color que tengo en el frente es el nuevo right y me dispongo a armar un nuevo frente",
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.C.c. =>colorRight"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "Y'"
    },
    "STD Nucleos (frente es up)": {
        "comment": "el color que tengo en el frente es el nuevo up y me dispongo a armar un nuevo frente",
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.C.c. =>colorUp"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "X"
    },
    "3x3 Standard": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Blanco arriba",
            "3x3 STD - Cara Superior",
            "3x3 STD - Aristas Laterales",
            "3x3 STD - Piso Inferior",
            "3x3 STD - Blanco arriba"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Blanco arriba": {
        "modo": "Best Match",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.white"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "X",
            "X'",
            "X2",
            "",
            "Z",
            "Z'"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Cara Superior": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Cruz Superior",
            "3x3 STD - Esquinas Superior"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Cruz Superior": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Cruz Superior (acomodar)",
            "3x3 STD - Cruz Superior 01",
            "3x3 STD - Cruz Superior 02",
            "3x3 STD - Cruz Superior 03",
            "3x3 STD - Cruz Superior 04",
            "3x3 STD - Cruz Superior 05",
            "3x3 STD - Cruz Superior 06",
            "3x3 STD - Cruz Superior 07",
            "3x3 STD - Cruz Superior 08"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "3x3 STD - Cruz Superior (acomodar)": {
        "modo": "Best Match",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "F.c.c.->colF",
            "R.c.c.->colR",
            "B.c.c.->colB",
            "L.c.c.->colL",
            "U.T.c.==colU",
            "U.B.c.==colU",
            "U.c.L.==colU",
            "U.c.R.==colU",
            "F.T.c.==colF",
            "R.T.c.==colR",
            "B.T.c.==colB",
            "L.T.c.==colL"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Cruz Superior 01": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "F.c.R.==colU",
            "R.c.L.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R",
        "comment": "",
        "important": True
    },
    "3x3 STD - Cruz Superior 02": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "R.c.R.==colU",
            "B.c.L.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "U' B U",
        "comment": "",
        "important": True
    },
    "3x3 STD - Cruz Superior 03": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "B.c.R.==colU",
            "L.c.L.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "U2 L U2",
        "comment": "",
        "important": True
    },
    "3x3 STD - Cruz Superior 04": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "L.c.R.==colU",
            "F.c.L.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "U F U'",
        "comment": "",
        "important": True
    },
    "3x3 STD - Cruz Superior 05": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "F.B.c.==colU",
            "D.T.c.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "F' R F",
        "comment": "",
        "important": True
    },
    "3x3 STD - Cruz Superior 06": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "R.B.c.==colR",
            "D.c.R.==colU"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "R2",
        "comment": "",
        "important": True
    },
    "3x3 STD - Cruz Superior 07": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "U.c.R.==colU",
            "R.T.c.!=colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R",
        "comment": ""
    },
    "3x3 STD - Cruz Superior 08": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.T.c.==colU"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R",
        "comment": "",
        "important": True
    },
    "3x3 STD - Esquinas Superior": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Esquinas Superior 1",
            "3x3 STD - Esquinas Superior 2",
            "3x3 STD - Esquinas Superior 3",
            "3x3 STD - Esquinas Superior 4"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "3x3 STD - Esquinas Superior 1": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "F.c.c.->colF",
            "F.B.B.==colU",
            "R.B.L.==colR",
            "D.T.R.==colF"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "D' R' D R",
        "comment": "",
        "important": True
    },
    "3x3 STD - Esquinas Superior 2": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "F.c.c.->colF",
            "D.T.R.==colU",
            "F.B.B.==colR",
            "R.B.L.==colF"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "R' D R D' Y L D' L'",
        "comment": "",
        "important": True
    },
    "3x3 STD - Esquinas Superior 3": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "F.T.R.==colU",
            "F.B.L.!=colU",
            "L.B.R.!=colU",
            "D.T.L.!=colU"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "R' D R",
        "comment": ""
    },
    "3x3 STD - Esquinas Superior 4": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "R.c.c.->colR",
            "U.B.R.==colU",
            "R.T.L.!=colR",
            "F.B.L.!=colU",
            "L.B.R.!=colU",
            "D.T.L.!=colU"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "R' D' R",
        "comment": ""
    },
    "3x3 STD - Piso Inferior": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Cruz Inferior",
            "3x3 STD - Esquinas Inferiores - Ubicar",
            "Corregir efecto esquinas de cubos pares",
            "3x3 STD - Esquinas Inferiores - Rotar"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Cruz Inferior": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Cruz Inferior 1.1",
            "3x3 STD - Cruz Inferior 1.2",
            "Invertir Arista (pares)",
            "3x3 STD - Cruz Inferior (acomodar)",
            "3x3 STD - Cruz Inferior 2.1",
            "3x3 STD - Cruz Inferior 2.2"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Cruz Inferior 1.1": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "D.c.L.!=colD",
            "D.c.R.!=colD",
            "D.T.c.==colD",
            "D.B.c.==colD"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "L D L' D L D2 L'",
        "comment": ""
    },
    "3x3 STD - Cruz Inferior 1.2": {
        "modo": "Twice",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "D.c.R.!=colD",
            "D.B.c.!=colD"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "M D M' D2 M D M'",
        "comment": ""
    },
    "Invertir Arista (pares)": {
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "D.T.c:C.!=colD"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "F.C:r.2d B2 D2 - F.l:c.u D2 F.C:r.u D2 F.C:r.d D2 - F2 F.C:r.d F2 F.l:c.d - B2 F.C:r.2d",
        "comment": ""
    },
    "3x3 STD - Cruz Inferior (acomodar)": {
        "modo": "Best Match",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c.->colF",
            "R.c.c.->colR",
            "L.c.c.->colL",
            "B.c.c.->colB",
            "F.B.c.==colF",
            "R.B.c.==colR",
            "L.B.c.==colL",
            "B.B.c.==colB"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "D",
            "D'",
            "D2"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Cruz Inferior 2.1": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c.->colF",
            "R.c.c.->colR",
            "L.c.c.->colL",
            "B.c.c.->colB",
            "F.B.c.!=colF",
            "B.B.c.!=colB",
            "L.B.c.==colL",
            "R.B.c.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "L D L' D L D2 L' D2",
        "comment": ""
    },
    "3x3 STD - Cruz Inferior 2.2": {
        "modo": "Twice",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c.->colF",
            "R.c.c.->colR",
            "F.B.c.!=colF",
            "R.B.c.!=colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "L D L' D L D2 L' D",
        "comment": ""
    },
    "3x3 STD - Esquinas Inferiores - Ubicar": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Esquinas Inf Ubicar - 1",
            "3x3 STD - Esquinas Inf Ubicar - A",
            "3x3 STD - Esquinas Inf Ubicar - 1",
            "3x3 STD - Esquinas Inf Ubicar - B",
            "3x3 STD - Esquinas Inf Ubicar - 1"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Esquinas Inf Ubicar - 1": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "R.c.c.->colR",
            "L.c.c.->colL",
            "D.T.L.==colD ==colF ==colL",
            "F.B.L.==colD ==colF ==colL",
            "L.B.R.==colD ==colF ==colL",
            "D.T.R.==colD ==colR ==colB",
            "F.B.R.==colD ==colR ==colB",
            "R.B.L.==colD ==colR ==colB",
            "D.B.R.==colD ==colL ==colB",
            "B.B.L.==colD ==colL ==colB",
            "R.B.R.==colD ==colL ==colB",
            "D.B.L.==colD ==colF ==colR",
            "B.B.R.==colD ==colF ==colR",
            "L.B.L.==colD ==colF ==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R' D L D' R D L' D'",
        "comment": ""
    },
    "3x3 STD - Esquinas Inf Ubicar - A": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "R.c.c.->colR",
            "L.c.c.->colL",
            "D.B.L.==colD ==colF ==colR",
            "B.B.R.==colD ==colF ==colR",
            "L.B.L.==colD ==colF ==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R' D L D' R D L' D'",
        "comment": ""
    },
    "3x3 STD - Esquinas Inf Ubicar - B": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "R.c.c.->colR",
            "L.c.c.->colL",
            "D.T.R.==colD ==colB ==colR",
            "R.B.L.==colD ==colB ==colR",
            "F.B.R.==colD ==colB ==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R' D L D' R D L' D'",
        "comment": ""
    },
    "Corregir efecto esquinas de cubos pares": {
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [
            "Check ubicacion esquinas inferiores",
            "Intercambiar aristas y rearmar la cruz inferior"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": True,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "Check ubicacion esquinas inferiores": {
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "L.c.c.->colL",
            "R.c.c.->colR",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "D.T.L.==colD ==colF ==colL",
            "F.B.L.==colD ==colF ==colL",
            "L.B.R.==colD ==colF ==colL",
            "D.T.R.==colD ==colF ==colR",
            "F.B.R.==colD ==colF ==colR",
            "R.B.L.==colD ==colF ==colR",
            "D.B.L.==colD ==colB ==colL",
            "B.B.R.==colD ==colB ==colL",
            "L.B.L.==colD ==colB ==colL",
            "D.B.R.==colD ==colB ==colR",
            "B.B.L.==colD ==colB ==colR",
            "R.B.R.==colD ==colB ==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "Intercambiar aristas y rearmar la cruz inferior": {
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [
            "Intercambio Aristas (pares)",
            "3x3 STD - Cruz Inferior",
            "3x3 STD - Esquinas Inferiores - Ubicar"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": True,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "Intercambio Aristas (pares)": {
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.T.L.->ccc",
            "F.T.L.==ccc"
        ],
        "mirror": True,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.C:r.2d D2 F.C:r.2d F.C:B.2l F.C:r.2d F.C:b.2l",
        "comment": ""
    },
    "3x3 STD - Esquinas Inferiores - Rotar": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Esquinas Inf Rotar - 1",
            "3x3 STD - Esquinas Inf Rotar - 2",
            "3x3 STD - Esquinas Inf Rotar - 1"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": ""
    },
    "3x3 STD - Esquinas Inf Rotar - 1": {
        "modo": "Twice",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "R.c.c.->colR",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "D.T.R.==colR",
            "R.B.L.==colF",
            "F.B.B.==colD",
            "D.B.R.==colR",
            "R.B.R.==colB",
            "B.B.L.==colD"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            "",
            "X",
            "X'",
            "",
            "",
            "Y",
            "Y'",
            "",
            "",
            "Z",
            "Z'",
            "",
            "",
            "Y2",
            "X2",
            "Z2",
            "",
            "X Y",
            "X Y'",
            "X Y2",
            "",
            "Z Y",
            "Z Y'",
            "Z Y2",
            "",
            "X' Y",
            "X' Y'",
            "X' Y2",
            "",
            "Z' Y",
            "Z' Y'",
            "Z' Y2",
            "",
            "X2 Y",
            "X2 Y'"
        ],
        "algoritmo": "L D L' D L D2 L' R' D' R D' R' D2 R",
        "comment": ""
    },
    "3x3 STD - Esquinas Inf Rotar - 2": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "D.c.c.->colD",
            "R.c.c.->colR",
            "F.c.c.->colF",
            "L.c.c.->colL",
            "D.T.L.==colD",
            "F.B.L.==colF",
            "L.B.R.==colL",
            "D.T.R.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "L D L' D L D2 L' R' D' R D' R' D2 R",
        "comment": ""
    },
    "Check Armado": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "D.c.c.->colD",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "L.c.c.->colL",
            "R.c.c.->colR",
            "U.T:B.L:R.==colU",
            "D.T:B.L:R.==colD",
            "L.T:B.L:R.==colL",
            "R.T:B.L:R.==colR",
            "F.T:B.L:R.==colF",
            "B.T:B.L:R.==colB"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "Check Nucleos": {
        "modo": "Once",
        "minLado": 4,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->colU",
            "D.c.c.->colD",
            "F.c.c.->colF",
            "B.c.c.->colB",
            "L.c.c.->colL",
            "R.c.c.->colR",
            "U.C:c.C:c.==colU",
            "D.C:c.C:c.==colD",
            "L.C:c.C:c.==colL",
            "R.C:c.C:c.==colR",
            "F.C:c.C:c.==colF",
            "B.C:c.C:c.==colB",
            "F.c.c. c=colU,colR",
            "B.c.c. c=colL,colD",
            "F.c.c. o=colB",
            "R.c.c. o=colL",
            "U.c.c. o=colD"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": ""
    },
    "STD Aristas": {
        "modo": "Repeat",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "STD Aristas - Repeat",
            "Check Aristas"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "Armar las aristas",
        "important": False
    },
    "STD Aristas - Repeat": {
        "modo": "Repeat",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "0:C-3",
        "subMetodos": [
            "STD Aristas inversion parcial",
            "STD Aristas elije",
            "STD Aristas busca 1er complemento",
            "STD Aristas busca 2do complemento",
            "STD Aristas intercambio de segmentos",
            "STD Aristas movimiento caso 1 - 1",
            "STD Aristas movimiento caso 1 - 2",
            "STD Aristas movimiento caso 1 - 3",
            "STD Aristas inversion parcial"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "Intercambiar segmentos de arista entre tres aristas",
        "important": False
    },
    "Check Aristas": {
        "modo": "Once",
        "minLado": 3,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.T.l.->colUT",
            "U.T.l:r.==colUT",
            "U.B.l.->colUB",
            "U.B.l:r.==colUB",
            "D.T.l.->colDT",
            "D.T.l:r.==colDT",
            "D.B.l.->colDB",
            "D.B.l:r.==colDB",
            "F.T.l.->colFT",
            "F.T.l:r.==colFT",
            "F.B.l.->colFB",
            "F.B.l:r.==colFB",
            "B.T.l.->colBT",
            "B.T.l:r.==colBT",
            "B.B.l.->colBB",
            "B.B.l:r.==colBB",
            "L.T.l.->colLT",
            "L.T.l:r.==colLT",
            "L.B.l.->colLB",
            "L.B.l:r.==colLB",
            "R.T.l.->colRT",
            "R.T.l:r.==colRT",
            "R.B.l.->colRB",
            "R.B.l:r.==colRB",
            "U.t.L.->colUL",
            "U.t:b.L.==colUL",
            "U.t.R.->colUR",
            "U.t:b.R.==colUR",
            "D.t.L.->colDL",
            "D.t:b.L.==colDL",
            "D.t.R.->colDR",
            "D.t:b.R.==colDR",
            "F.t.L.->colFL",
            "F.t:b.L.==colFL",
            "F.t.R.->colFR",
            "F.t:b.R.==colFR",
            "B.t.L.->colBL",
            "B.t:b.L.==colBL",
            "B.t.R.->colBR",
            "B.t:b.R.==colBR",
            "L.t.L.->colLL",
            "L.t:b.L.==colLL",
            "L.t.R.->colLR",
            "L.t:b.R.==colLR",
            "R.t.L.->colRL",
            "R.t:b.L.==colRL",
            "R.t.R.->colRR",
            "R.t:b.R.==colRR"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas inversion parcial": {
        "modo": "Repeat",
        "minLado": 5,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU",
            "F.T.r-k-1.->colF",
            "U.B.l+k.==colF",
            "F.T.l+k.==colU"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "X",
            "Y X",
            "Y' X",
            "X2",
            "Z",
            "Y Z",
            "Y' Z",
            "Y Z'"
        ],
        "algoritmo": "F.r-k:r.2u B2 U2 - F.l:l+k.d U2 F.r-k:r.d U2 F.r-k:r.u U2 - F2 F.r-k:r.u F2 F.l:l+k.u - B2 F.r-k:r.2d",
        "comment": "Invertir segmentos de una arista sin involucrar a otras",
        "important": True
    },
    "STD Aristas elije": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "STD Aristas elije 1",
            "STD Aristas elije 2"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "Elegir un segmento de arista para armar",
        "important": False
    },
    "STD Aristas busca 1er complemento": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "STD Aristas busca complemento 1.1",
            "STD Aristas busca complemento 1.2"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas busca 2do complemento": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "STD Aristas busca complemento 2.1",
            "STD Aristas busca complemento 2.2",
            "STD Aristas busca complemento 2.3"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas movimiento caso 1 - 1": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU0",
            "F.T.r-k-1.->colF0",
            "U.T.r-k.==colF0",
            "B.T.l+k.==colU0",
            "U.T.r-k-1.->colU1",
            "B.T.l+k+1.->colB1",
            "R.B.l+k.==colU1",
            "D.t+k.R.==colB1",
            "U.B.r-k.->colU2",
            "F.T.r-k.->colF2",
            "R.B.l+k+1.==colF2",
            "D.t+k+1.R.==colU2"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.r-k:R.d U' R' U F.r-k:R.u",
        "comment": "",
        "important": True
    },
    "STD Aristas movimiento caso 1 - 2": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU0",
            "F.T.r-k-1.->colF0",
            "U.T.r-k.==colF0",
            "B.T.l+k.==colU0",
            "U.T.r-k-1.->colU1",
            "B.T.l+k+1.->colB1",
            "R.B.l+k.==colU1",
            "D.t+k.R.==colB1"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.r-k:R.d U' R' U F.r-k:R.u",
        "comment": "",
        "important": True
    },
    "STD Aristas movimiento caso 1 - 3": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU0",
            "F.T.r-k-1.->colF0",
            "U.T.r-k.==colF0",
            "B.T.l+k.==colU0"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.r-k:R.d U' R' U F.r-k:R.u",
        "comment": "",
        "important": True
    },
    "STD Aristas elije 1": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU",
            "F.T.r-k-1.->colF",
            "OR U.B.r-k.!=colU, F.T.r-k.!=colF",
            "",
            "U.B.l+k.!=colF",
            "F.T.l+k.!=colU"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "",
            "",
            "",
            "X",
            "X'",
            "",
            "",
            "Y",
            "Y'",
            "",
            "",
            "Z",
            "Z'",
            "",
            "",
            "Y2",
            "X2",
            "Z2",
            "",
            "X Y",
            "X Y'",
            "X Y2",
            "",
            "Z Y",
            "Z Y'",
            "Z Y2",
            "",
            "X' Y",
            "X' Y'",
            "X' Y2",
            "",
            "Z' Y",
            "Z' Y'",
            "Z' Y2",
            "",
            "X2 Y",
            "X2 Y'"
        ],
        "algoritmo": "",
        "comment": "Elegir un segmento de arista para armar",
        "important": False
    },
    "STD Aristas elije 2": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU",
            "F.T.r-k-1.->colF",
            "OR U.B.r-k.!=colU, F.T.r-k.!=colF"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "",
            "",
            "",
            "X",
            "X'",
            "",
            "",
            "Y",
            "Y'",
            "",
            "",
            "Z",
            "Z'",
            "",
            "",
            "Y2",
            "X2",
            "Z2",
            "",
            "X Y",
            "X Y'",
            "X Y2",
            "",
            "Z Y",
            "Z Y'",
            "Z Y2",
            "",
            "X' Y",
            "X' Y'",
            "X' Y2",
            "",
            "Z' Y",
            "Z' Y'",
            "Z' Y2",
            "",
            "X2 Y",
            "X2 Y'"
        ],
        "algoritmo": "",
        "comment": "Elegir un segmento de arista para armar",
        "important": False
    },
    "STD Aristas busca complemento 1.1": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU",
            "F.T.r-k-1.->colF",
            "U.T.r-k.==colF",
            "B.T.l+k.==colU"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "B' R D B2",
            "",
            "",
            "B",
            "U R' U'",
            "B'",
            "U' L U",
            "F U' F'",
            "R B",
            "F U F'",
            "L' B'",
            "R2 B",
            "R' D B2",
            "L2 B'",
            "L D' B2",
            "B2",
            "D' R' B",
            "D2 B2",
            "D R' B",
            "D B2",
            "R' B",
            "D' B2",
            "L B'"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas busca complemento 1.2": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k-1.->colU",
            "F.T.r-k-1.->colF",
            "U.T.r-k.==colF ==colU",
            "B.T.l+k.==colU ==colF"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "B' R D B2",
            "",
            "",
            "B",
            "U R' U'",
            "B'",
            "U' L U",
            "F U' F'",
            "R B",
            "F U F'",
            "L' B'",
            "R2 B",
            "R' D B2",
            "L2 B'",
            "L D' B2",
            "B2",
            "D' R' B",
            "D2 B2",
            "D R' B",
            "D B2",
            "R' B",
            "D' B2",
            "L B'"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas busca complemento 2.1": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.T.r-k-1.->colU",
            "B.T.l+k+1.->colB",
            "R.B.l+k.==colU",
            "D.t+k.R.==colB"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "R F D F'",
            "D2",
            "L' F' D F",
            "D",
            "F' R' F",
            "D'",
            "B R B'",
            "R",
            "B' D' B",
            "L' D2",
            "B D' B'",
            "R'",
            "F D F'",
            "L D2",
            "F' D F",
            "R2",
            "R' F D F'",
            "L2 D2",
            "L F' D F"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas busca complemento 2.2": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.r-k.->colU",
            "F.T.r-k.->colF",
            "R.B.l+k+1.==colF",
            "D.t+k+1.R.==colU"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "R F D F'",
            "D2",
            "L' F' D F",
            "D",
            "F' R' F",
            "D'",
            "B R B'",
            "R",
            "B' D' B",
            "L' D2",
            "B D' B'",
            "R'",
            "F D F'",
            "L D2",
            "F' D F",
            "R2",
            "R' F D F'",
            "L2 D2",
            "L F' D F"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Aristas busca complemento 2.3": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "R.B.l+k.->colR",
            "D.t+k.R.->colD",
            "OR R.B.l+k+1.!=colR, D.t+k+1.R.!=colD"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "R F D F'",
            "D2",
            "L' F' D F",
            "D",
            "F' R' F",
            "D'",
            "B R B'",
            "R",
            "B' D' B",
            "L' D2",
            "B D' B'",
            "R'",
            "F D F'",
            "L D2",
            "F' D F",
            "R2",
            "R' F D F'",
            "L2 D2",
            "L F' D F"
        ],
        "algoritmo": "",
        "comment": "Si no encuentro un buen 2do complemento al menos trato de no separar un segmento bien armado, busco una arista que no tenga armada esa parte...",
        "important": False
    },
    "STD Aristas intercambio de segmentos": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.B.l+k.->colUF1",
            "U.B.l+k+1.->colUF2",
            "F.T.l+k.->colFU1",
            "F.T.l+k+1.->colFU2",
            "U.T.r-k-1.==colUF1",
            "U.T.r-k.==colUF2",
            "B.T.l+k+1.==colFU1",
            "B.T.l+k.==colFU2"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "B' R D B2"
        ],
        "algoritmo": "F.r-k:R.d U' R' U F' U F U' F.r-k:R.u",
        "comment": "solo sucede, a veces, cuando solo quedan dos aristas por armar",
        "important": True
    },
    "STD Nucleos": {
        "modo": "Repeat",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "Check Nucleos",
            "STD Nucleos (pares)"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "En cubos pares, armar el nucleo (las 2x2 celdas centrales de cada cara)",
        "important": False
    },
    "STD Acomodar Laterales": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [
            "STD Acomodar Laterales 1.1",
            "STD Acomodar Laterales 1.2",
            "STD Acomodar Laterales 2.1",
            "STD Acomodar Laterales 2.2",
            "STD Acomodar Laterales 1.1",
            "STD Acomodar Laterales 1.2",
            "STD Acomodar Laterales 3.1",
            "STD Acomodar Laterales 3.2",
            "STD Acomodar Laterales 1.1",
            "STD Acomodar Laterales 1.2"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Acomodar Esquinas": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [
            "STD Acomodar Esquinas 1.1",
            "STD Acomodar Esquinas 1.2",
            "STD Acomodar Esquinas 2.1",
            "STD Acomodar Esquinas 2.2",
            "STD Acomodar Esquinas 1.1",
            "STD Acomodar Esquinas 1.2",
            "STD Acomodar Esquinas 3.1",
            "STD Acomodar Esquinas 3.2",
            "STD Acomodar Esquinas 1.1",
            "STD Acomodar Esquinas 1.2"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "3x3 STD - Aristas Laterales": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [
            "3x3 STD - Aristas Laterales 1",
            "3x3 STD - Aristas Laterales 2"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "3x3 STD - Aristas Laterales 1": {
        "modo": "Repeat",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c.->colF",
            "R.c.c.->colR",
            "L.B.c.==colF",
            "D.c.L.==colR"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2",
            "D",
            "Y D",
            "Y' D",
            "Y2 D",
            "D'",
            "Y D'",
            "Y' D'",
            "Y2 D'",
            "D2",
            "Y D2",
            "Y' D2",
            "Y2 D2"
        ],
        "algoritmo": "R' D R Y D L D' L'",
        "comment": "Colocar una arista lateral en su lugar sin desarmar la cara de arriba",
        "important": True
    },
    "3x3 STD - Aristas Laterales 2": {
        "modo": "Once",
        "minLado": 3,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c.c.->colF",
            "F.c.R.!=colF"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "Y",
            "Y'",
            "Y2"
        ],
        "algoritmo": "R' D R Y D L D' L'",
        "comment": "Sacar una arista mal colocada sin desarmar la cara de arriba",
        "important": True
    },
    "STD Acomodar Laterales 1.1": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c.c+i+k+1.==fr",
            "F.C-i-k-1.C.==up"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Buscar si tengo casos en que las celdas intercambiadas son exactamente las que necesita cada cara",
        "important": True
    },
    "STD Acomodar Laterales 1.2": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "D.c.C.->dn",
            "U.c.c+i+k+1.==dn",
            "D.C-i-k-1.C.==up"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "D",
            "D U",
            "D'",
            "D' U",
            "D2",
            "D2 U",
            "X",
            "X U",
            "X D",
            "X D U",
            "X D'",
            "X D' U",
            "X D2",
            "X D2 U",
            "Z",
            "Z U",
            "Z D",
            "Z D U",
            "Z D'",
            "Z D' U",
            "Z D2",
            "Z D2 U"
        ],
        "algoritmo": "F.c+i+k+1:R.2d D F.c+i+k+1:R.2u",
        "comment": "Buscar si tengo casos en que las celdas intercambiadas son exactamente las que necesita cada cara",
        "important": True
    },
    "STD Acomodar Laterales 2.1": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c.c+i+k+1.!=up",
            "F.C-i-k-1.C.==up",
            "U.c.c+i+k+1.o!fr"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Buscar si tengo casos en que al intercambiar celdas no queda en una cara una celda de su cara opuesta",
        "important": True
    },
    "STD Acomodar Laterales 2.2": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c.c+i+k+1.==fr",
            "F.C-i-k-1.C.!=fr",
            "F.C-i-k-1.C.o!up"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Buscar si tengo casos en que al intercambiar celdas no queda en una cara una celda de su cara opuesta",
        "important": True
    },
    "STD Acomodar Laterales 3.1": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c.c+i+k+1.==fr",
            "F.C-i-k-1.C.!=fr"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Intercambio aunque sea para que una de las dos caras obtenga una celda",
        "important": True
    },
    "STD Acomodar Laterales 3.2": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c.c+i+k+1.!=up",
            "F.C-i-k-1.C.==up"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Intercambio aunque sea para que una de las dos caras obtenga una celda",
        "important": True
    },
    "STD Acomodar Esquinas 1.1": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c+i+k+1.c+i+k+1.==fr",
            "F.c+i+k+1.C-i-k-1.==up"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "F",
            "F U",
            "F U'",
            "F U2",
            "F'",
            "F' U",
            "F' U'",
            "F' U2",
            "F2",
            "F2 U",
            "F2 U'",
            "F2 U2",
            "Y",
            "Y U",
            "Y U'",
            "Y U2",
            "Y F",
            "Y F U",
            "Y F U'",
            "Y F U2",
            "Y F'",
            "Y F' U",
            "Y F' U'",
            "Y F' U2",
            "Y F2",
            "Y F2 U",
            "Y F2 U'",
            "Y F2 U2",
            "Y'",
            "Y' U",
            "Y' U'",
            "Y' U2",
            "Y' F",
            "Y' F U",
            "Y' F U'",
            "Y' F U2",
            "Y' F'",
            "Y' F' U",
            "Y' F' U'",
            "Y' F' U2",
            "Y' F2",
            "Y' F2 U",
            "Y' F2 U'",
            "Y' F2 U2",
            "X'",
            "X' U",
            "X' U'",
            "X' U2",
            "X' F",
            "X' F U",
            "X' F U'",
            "X' F U2",
            "X' F'",
            "X' F' U",
            "X' F' U'",
            "X' F' U2",
            "X' F2",
            "X' F2 U",
            "X' F2 U'",
            "X' F2 U2",
            "X",
            "X U",
            "X U'",
            "X U2",
            "X F",
            "X F U",
            "X F U'",
            "X F U2",
            "X F'",
            "X F' U",
            "X F' U'",
            "X F' U2",
            "X F2",
            "X F2 U",
            "X F2 U'",
            "X F2 U2",
            "X2",
            "X2 U",
            "X2 U'",
            "X2 U2",
            "X2 F",
            "X2 F U",
            "X2 F U'",
            "X2 F U2",
            "X2 F'",
            "X2 F' U",
            "X2 F' U'",
            "X2 F' U2",
            "X2 F2",
            "X2 F2 U",
            "X2 F2 U'",
            "X2 F2 U2",
            "Z",
            "Z U",
            "Z U'",
            "Z U2",
            "Z F",
            "Z F U",
            "Z F U'",
            "Z F U2",
            "Z F'",
            "Z F' U",
            "Z F' U'",
            "Z F' U2",
            "Z F2",
            "Z F2 U",
            "Z F2 U'",
            "Z F2 U2",
            "Z'",
            "Z' U",
            "Z' U'",
            "Z' U2",
            "Z' F",
            "Z' F U",
            "Z' F U'",
            "Z' F U2",
            "Z' F'",
            "Z' F' U",
            "Z' F' U'",
            "Z' F' U2",
            "Z' F2",
            "Z' F2 U",
            "Z' F2 U'",
            "Z' F2 U2",
            "Y' Z",
            "Y' Z U",
            "Y' Z U'",
            "Y' Z U2",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F U'",
            "Y' Z F U2",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F' U'",
            "Y' Z F' U2",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y' Z F2 U'",
            "Y' Z F2 U2",
            "Y Z'",
            "Y Z' U",
            "Y Z' U'",
            "Y Z' U2",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F U'",
            "Y Z' F U2",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F' U'",
            "Y Z' F' U2",
            "Y Z' F2",
            "Y Z' F2 U",
            "Y Z' F2 U'",
            "Y Z' F2 U2",
            "Z Y'",
            "Z Y' U",
            "Z Y' U'",
            "Z Y' U2",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F U'",
            "Z Y' F U2",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F' U'",
            "Z Y' F' U2",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z Y' F2 U'",
            "Z Y' F2 U2",
            "Z' Y",
            "Z' Y U",
            "Z' Y U'",
            "Z' Y U2",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F U'",
            "Z' Y F U2",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F' U'",
            "Z' Y F' U2",
            "Z' Y F2",
            "Z' Y F2 U",
            "Z' Y F2 U'",
            "Z' Y F2 U2"
        ],
        "algoritmo": "F.c+i+k+1:R.d F2 F.c+i+k+1:R.u F F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Buscar si tengo casos en que las celdas intercambiadas son exactamente las que necesita cada cara",
        "important": True
    },
    "STD Acomodar Esquinas 1.2": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "D.c.C.->dn",
            "U.c+i+k+1.c+i+k+1.==dn",
            "D.c+i+k+1.C-i-k-1.==up"
        ],
        "mirror": False,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "D",
            "D U",
            "D U'",
            "D U2",
            "D'",
            "D' U",
            "D' U'",
            "D' U2",
            "D2",
            "D2 U",
            "D2 U'",
            "D2 U2",
            "X",
            "X U",
            "X U'",
            "X U2",
            "X D",
            "X D U",
            "X D U'",
            "X D U2",
            "X D'",
            "X D' U",
            "X D' U'",
            "X D' U2",
            "X D2",
            "X D2 U",
            "X D2 U'",
            "X D2 U2",
            "Z",
            "Z U",
            "Z U'",
            "Z U2",
            "Z D",
            "Z D U",
            "Z D U'",
            "Z D U2",
            "Z D'",
            "Z D' U",
            "Z D' U'",
            "Z D' U2",
            "Z D2",
            "Z D2 U",
            "Z D2 U'",
            "Z D2 U2"
        ],
        "algoritmo": "F.c+i+k+1:R.2d D2 F.c+i+k+1:R.2u D F.c+i+k+1:R.2d D F.c+i+k+1:R.2u",
        "comment": "Buscar si tengo casos en que las celdas intercambiadas son exactamente las que necesita cada cara",
        "important": True
    },
    "STD Acomodar Esquinas 2.1": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c+i+k+1.c+i+k+1.!=up",
            "F.c+i+k+1.C-i-k-1.==up",
            "U.c+i+k+1.c+i+k+1.o!fr"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "F",
            "F U",
            "F U'",
            "F U2",
            "F'",
            "F' U",
            "F' U'",
            "F' U2",
            "F2",
            "F2 U",
            "F2 U'",
            "F2 U2",
            "Y",
            "Y U",
            "Y U'",
            "Y U2",
            "Y F",
            "Y F U",
            "Y F U'",
            "Y F U2",
            "Y F'",
            "Y F' U",
            "Y F' U'",
            "Y F' U2",
            "Y F2",
            "Y F2 U",
            "Y F2 U'",
            "Y F2 U2",
            "Y'",
            "Y' U",
            "Y' U'",
            "Y' U2",
            "Y' F",
            "Y' F U",
            "Y' F U'",
            "Y' F U2",
            "Y' F'",
            "Y' F' U",
            "Y' F' U'",
            "Y' F' U2",
            "Y' F2",
            "Y' F2 U",
            "Y' F2 U'",
            "Y' F2 U2",
            "X'",
            "X' U",
            "X' U'",
            "X' U2",
            "X' F",
            "X' F U",
            "X' F U'",
            "X' F U2",
            "X' F'",
            "X' F' U",
            "X' F' U'",
            "X' F' U2",
            "X' F2",
            "X' F2 U",
            "X' F2 U'",
            "X' F2 U2",
            "X",
            "X U",
            "X U'",
            "X U2",
            "X F",
            "X F U",
            "X F U'",
            "X F U2",
            "X F'",
            "X F' U",
            "X F' U'",
            "X F' U2",
            "X F2",
            "X F2 U",
            "X F2 U'",
            "X F2 U2",
            "X2",
            "X2 U",
            "X2 U'",
            "X2 U2",
            "X2 F",
            "X2 F U",
            "X2 F U'",
            "X2 F U2",
            "X2 F'",
            "X2 F' U",
            "X2 F' U'",
            "X2 F' U2",
            "X2 F2",
            "X2 F2 U",
            "X2 F2 U'",
            "X2 F2 U2",
            "Z",
            "Z U",
            "Z U'",
            "Z U2",
            "Z F",
            "Z F U",
            "Z F U'",
            "Z F U2",
            "Z F'",
            "Z F' U",
            "Z F' U'",
            "Z F' U2",
            "Z F2",
            "Z F2 U",
            "Z F2 U'",
            "Z F2 U2",
            "Z'",
            "Z' U",
            "Z' U'",
            "Z' U2",
            "Z' F",
            "Z' F U",
            "Z' F U'",
            "Z' F U2",
            "Z' F'",
            "Z' F' U",
            "Z' F' U'",
            "Z' F' U2",
            "Z' F2",
            "Z' F2 U",
            "Z' F2 U'",
            "Z' F2 U2",
            "Y' Z",
            "Y' Z U",
            "Y' Z U'",
            "Y' Z U2",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F U'",
            "Y' Z F U2",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F' U'",
            "Y' Z F' U2",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y' Z F2 U'",
            "Y' Z F2 U2",
            "Y Z'",
            "Y Z' U",
            "Y Z' U'",
            "Y Z' U2",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F U'",
            "Y Z' F U2",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F' U'",
            "Y Z' F' U2",
            "Y Z' F2",
            "Y Z' F2 U",
            "Y Z' F2 U'",
            "Y Z' F2 U2",
            "Z Y'",
            "Z Y' U",
            "Z Y' U'",
            "Z Y' U2",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F U'",
            "Z Y' F U2",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F' U'",
            "Z Y' F' U2",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z Y' F2 U'",
            "Z Y' F2 U2",
            "Z' Y",
            "Z' Y U",
            "Z' Y U'",
            "Z' Y U2",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F U'",
            "Z' Y F U2",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F' U'",
            "Z' Y F' U2",
            "Z' Y F2",
            "Z' Y F2 U",
            "Z' Y F2 U'",
            "Z' Y F2 U2"
        ],
        "algoritmo": "F.c+i+k+1:R.d F2 F.c+i+k+1:R.u F F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Buscar si tengo casos en que al intercambiar celdas no queda en una cara una celda de su cara opuesta",
        "important": True
    },
    "STD Acomodar Esquinas 2.2": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c+i+k+1.c+i+k+1.==fr",
            "F.c+i+k+1.C-i-k-1.!=fr",
            "F.c+i+k+1.C-i-k-1.o!up"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "F",
            "F U",
            "F U'",
            "F U2",
            "F'",
            "F' U",
            "F' U'",
            "F' U2",
            "F2",
            "F2 U",
            "F2 U'",
            "F2 U2",
            "Y",
            "Y U",
            "Y U'",
            "Y U2",
            "Y F",
            "Y F U",
            "Y F U'",
            "Y F U2",
            "Y F'",
            "Y F' U",
            "Y F' U'",
            "Y F' U2",
            "Y F2",
            "Y F2 U",
            "Y F2 U'",
            "Y F2 U2",
            "Y'",
            "Y' U",
            "Y' U'",
            "Y' U2",
            "Y' F",
            "Y' F U",
            "Y' F U'",
            "Y' F U2",
            "Y' F'",
            "Y' F' U",
            "Y' F' U'",
            "Y' F' U2",
            "Y' F2",
            "Y' F2 U",
            "Y' F2 U'",
            "Y' F2 U2",
            "X'",
            "X' U",
            "X' U'",
            "X' U2",
            "X' F",
            "X' F U",
            "X' F U'",
            "X' F U2",
            "X' F'",
            "X' F' U",
            "X' F' U'",
            "X' F' U2",
            "X' F2",
            "X' F2 U",
            "X' F2 U'",
            "X' F2 U2",
            "X",
            "X U",
            "X U'",
            "X U2",
            "X F",
            "X F U",
            "X F U'",
            "X F U2",
            "X F'",
            "X F' U",
            "X F' U'",
            "X F' U2",
            "X F2",
            "X F2 U",
            "X F2 U'",
            "X F2 U2",
            "X2",
            "X2 U",
            "X2 U'",
            "X2 U2",
            "X2 F",
            "X2 F U",
            "X2 F U'",
            "X2 F U2",
            "X2 F'",
            "X2 F' U",
            "X2 F' U'",
            "X2 F' U2",
            "X2 F2",
            "X2 F2 U",
            "X2 F2 U'",
            "X2 F2 U2",
            "Z",
            "Z U",
            "Z U'",
            "Z U2",
            "Z F",
            "Z F U",
            "Z F U'",
            "Z F U2",
            "Z F'",
            "Z F' U",
            "Z F' U'",
            "Z F' U2",
            "Z F2",
            "Z F2 U",
            "Z F2 U'",
            "Z F2 U2",
            "Z'",
            "Z' U",
            "Z' U'",
            "Z' U2",
            "Z' F",
            "Z' F U",
            "Z' F U'",
            "Z' F U2",
            "Z' F'",
            "Z' F' U",
            "Z' F' U'",
            "Z' F' U2",
            "Z' F2",
            "Z' F2 U",
            "Z' F2 U'",
            "Z' F2 U2",
            "Y' Z",
            "Y' Z U",
            "Y' Z U'",
            "Y' Z U2",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F U'",
            "Y' Z F U2",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F' U'",
            "Y' Z F' U2",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y' Z F2 U'",
            "Y' Z F2 U2",
            "Y Z'",
            "Y Z' U",
            "Y Z' U'",
            "Y Z' U2",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F U'",
            "Y Z' F U2",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F' U'",
            "Y Z' F' U2",
            "Y Z' F2",
            "Y Z' F2 U",
            "Y Z' F2 U'",
            "Y Z' F2 U2",
            "Z Y'",
            "Z Y' U",
            "Z Y' U'",
            "Z Y' U2",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F U'",
            "Z Y' F U2",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F' U'",
            "Z Y' F' U2",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z Y' F2 U'",
            "Z Y' F2 U2",
            "Z' Y",
            "Z' Y U",
            "Z' Y U'",
            "Z' Y U2",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F U'",
            "Z' Y F U2",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F' U'",
            "Z' Y F' U2",
            "Z' Y F2",
            "Z' Y F2 U",
            "Z' Y F2 U'",
            "Z' Y F2 U2"
        ],
        "algoritmo": "F.c+i+k+1:R.d F2 F.c+i+k+1:R.u F F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Buscar si tengo casos en que al intercambiar celdas no queda en una cara una celda de su cara opuesta",
        "important": True
    },
    "STD Acomodar Esquinas 3.1": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c+i+k+1.c+i+k+1.!=up",
            "F.c+i+k+1.C-i-k-1.==up"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "F",
            "F U",
            "F U'",
            "F U2",
            "F'",
            "F' U",
            "F' U'",
            "F' U2",
            "F2",
            "F2 U",
            "F2 U'",
            "F2 U2",
            "Y",
            "Y U",
            "Y U'",
            "Y U2",
            "Y F",
            "Y F U",
            "Y F U'",
            "Y F U2",
            "Y F'",
            "Y F' U",
            "Y F' U'",
            "Y F' U2",
            "Y F2",
            "Y F2 U",
            "Y F2 U'",
            "Y F2 U2",
            "Y'",
            "Y' U",
            "Y' U'",
            "Y' U2",
            "Y' F",
            "Y' F U",
            "Y' F U'",
            "Y' F U2",
            "Y' F'",
            "Y' F' U",
            "Y' F' U'",
            "Y' F' U2",
            "Y' F2",
            "Y' F2 U",
            "Y' F2 U'",
            "Y' F2 U2",
            "X'",
            "X' U",
            "X' U'",
            "X' U2",
            "X' F",
            "X' F U",
            "X' F U'",
            "X' F U2",
            "X' F'",
            "X' F' U",
            "X' F' U'",
            "X' F' U2",
            "X' F2",
            "X' F2 U",
            "X' F2 U'",
            "X' F2 U2",
            "X",
            "X U",
            "X U'",
            "X U2",
            "X F",
            "X F U",
            "X F U'",
            "X F U2",
            "X F'",
            "X F' U",
            "X F' U'",
            "X F' U2",
            "X F2",
            "X F2 U",
            "X F2 U'",
            "X F2 U2",
            "X2",
            "X2 U",
            "X2 U'",
            "X2 U2",
            "X2 F",
            "X2 F U",
            "X2 F U'",
            "X2 F U2",
            "X2 F'",
            "X2 F' U",
            "X2 F' U'",
            "X2 F' U2",
            "X2 F2",
            "X2 F2 U",
            "X2 F2 U'",
            "X2 F2 U2",
            "Z",
            "Z U",
            "Z U'",
            "Z U2",
            "Z F",
            "Z F U",
            "Z F U'",
            "Z F U2",
            "Z F'",
            "Z F' U",
            "Z F' U'",
            "Z F' U2",
            "Z F2",
            "Z F2 U",
            "Z F2 U'",
            "Z F2 U2",
            "Z'",
            "Z' U",
            "Z' U'",
            "Z' U2",
            "Z' F",
            "Z' F U",
            "Z' F U'",
            "Z' F U2",
            "Z' F'",
            "Z' F' U",
            "Z' F' U'",
            "Z' F' U2",
            "Z' F2",
            "Z' F2 U",
            "Z' F2 U'",
            "Z' F2 U2",
            "Y' Z",
            "Y' Z U",
            "Y' Z U'",
            "Y' Z U2",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F U'",
            "Y' Z F U2",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F' U'",
            "Y' Z F' U2",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y' Z F2 U'",
            "Y' Z F2 U2",
            "Y Z'",
            "Y Z' U",
            "Y Z' U'",
            "Y Z' U2",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F U'",
            "Y Z' F U2",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F' U'",
            "Y Z' F' U2",
            "Y Z' F2",
            "Y Z' F2 U",
            "Y Z' F2 U'",
            "Y Z' F2 U2",
            "Z Y'",
            "Z Y' U",
            "Z Y' U'",
            "Z Y' U2",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F U'",
            "Z Y' F U2",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F' U'",
            "Z Y' F' U2",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z Y' F2 U'",
            "Z Y' F2 U2",
            "Z' Y",
            "Z' Y U",
            "Z' Y U'",
            "Z' Y U2",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F U'",
            "Z' Y F U2",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F' U'",
            "Z' Y F' U2",
            "Z' Y F2",
            "Z' Y F2 U",
            "Z' Y F2 U'",
            "Z' Y F2 U2"
        ],
        "algoritmo": "F.c+i+k+1:R.d F2 F.c+i+k+1:R.u F F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Intercambio aunque sea para que una de las dos caras obtenga una celda",
        "important": True
    },
    "STD Acomodar Esquinas 3.2": {
        "modo": "Repeat",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.C.C.->up",
            "F.c.C.->fr",
            "U.c+i+k+1.c+i+k+1.==fr",
            "F.c+i+k+1.C-i-k-1.!=fr"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2",
            "F",
            "F U",
            "F U'",
            "F U2",
            "F'",
            "F' U",
            "F' U'",
            "F' U2",
            "F2",
            "F2 U",
            "F2 U'",
            "F2 U2",
            "Y",
            "Y U",
            "Y U'",
            "Y U2",
            "Y F",
            "Y F U",
            "Y F U'",
            "Y F U2",
            "Y F'",
            "Y F' U",
            "Y F' U'",
            "Y F' U2",
            "Y F2",
            "Y F2 U",
            "Y F2 U'",
            "Y F2 U2",
            "Y'",
            "Y' U",
            "Y' U'",
            "Y' U2",
            "Y' F",
            "Y' F U",
            "Y' F U'",
            "Y' F U2",
            "Y' F'",
            "Y' F' U",
            "Y' F' U'",
            "Y' F' U2",
            "Y' F2",
            "Y' F2 U",
            "Y' F2 U'",
            "Y' F2 U2",
            "X'",
            "X' U",
            "X' U'",
            "X' U2",
            "X' F",
            "X' F U",
            "X' F U'",
            "X' F U2",
            "X' F'",
            "X' F' U",
            "X' F' U'",
            "X' F' U2",
            "X' F2",
            "X' F2 U",
            "X' F2 U'",
            "X' F2 U2",
            "X",
            "X U",
            "X U'",
            "X U2",
            "X F",
            "X F U",
            "X F U'",
            "X F U2",
            "X F'",
            "X F' U",
            "X F' U'",
            "X F' U2",
            "X F2",
            "X F2 U",
            "X F2 U'",
            "X F2 U2",
            "X2",
            "X2 U",
            "X2 U'",
            "X2 U2",
            "X2 F",
            "X2 F U",
            "X2 F U'",
            "X2 F U2",
            "X2 F'",
            "X2 F' U",
            "X2 F' U'",
            "X2 F' U2",
            "X2 F2",
            "X2 F2 U",
            "X2 F2 U'",
            "X2 F2 U2",
            "Z",
            "Z U",
            "Z U'",
            "Z U2",
            "Z F",
            "Z F U",
            "Z F U'",
            "Z F U2",
            "Z F'",
            "Z F' U",
            "Z F' U'",
            "Z F' U2",
            "Z F2",
            "Z F2 U",
            "Z F2 U'",
            "Z F2 U2",
            "Z'",
            "Z' U",
            "Z' U'",
            "Z' U2",
            "Z' F",
            "Z' F U",
            "Z' F U'",
            "Z' F U2",
            "Z' F'",
            "Z' F' U",
            "Z' F' U'",
            "Z' F' U2",
            "Z' F2",
            "Z' F2 U",
            "Z' F2 U'",
            "Z' F2 U2",
            "Y' Z",
            "Y' Z U",
            "Y' Z U'",
            "Y' Z U2",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F U'",
            "Y' Z F U2",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F' U'",
            "Y' Z F' U2",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y' Z F2 U'",
            "Y' Z F2 U2",
            "Y Z'",
            "Y Z' U",
            "Y Z' U'",
            "Y Z' U2",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F U'",
            "Y Z' F U2",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F' U'",
            "Y Z' F' U2",
            "Y Z' F2",
            "Y Z' F2 U",
            "Y Z' F2 U'",
            "Y Z' F2 U2",
            "Z Y'",
            "Z Y' U",
            "Z Y' U'",
            "Z Y' U2",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F U'",
            "Z Y' F U2",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F' U'",
            "Z Y' F' U2",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z Y' F2 U'",
            "Z Y' F2 U2",
            "Z' Y",
            "Z' Y U",
            "Z' Y U'",
            "Z' Y U2",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F U'",
            "Z' Y F U2",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F' U'",
            "Z' Y F' U2",
            "Z' Y F2",
            "Z' Y F2 U",
            "Z' Y F2 U'",
            "Z' Y F2 U2"
        ],
        "algoritmo": "F.c+i+k+1:R.d F2 F.c+i+k+1:R.u F F.c+i+k+1:R.d F F.c+i+k+1:R.u",
        "comment": "Intercambio aunque sea para que una de las dos caras obtenga una celda",
        "important": True
    },
    "STD Armar Laterales": {
        "modo": "Repeat",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "0:i",
        "rangoK": "",
        "subMetodos": [
            "STD Armar Laterales - Caso 1",
            "STD Armar Laterales - Caso 2.1",
            "STD Armar Laterales - Caso 2.2",
            "STD Armar Laterales - Elije",
            "STD Armar Laterales - Complemento 1",
            "STD Armar Laterales - Complemento 2",
            "STD Armar Laterales - Caso 3.1",
            "STD Armar Laterales - Caso 3.2",
            "STD Armar Laterales - Caso 3.3"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Elije": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            "",
            "X",
            "X'",
            "",
            "",
            "Y",
            "Y'",
            "",
            "",
            "Z",
            "Z'",
            "",
            "",
            "Y2",
            "X2",
            "Z2",
            "",
            "X Y",
            "X Y'",
            "X Y2",
            "",
            "Z Y",
            "Z Y'",
            "Z Y2",
            "",
            "X' Y",
            "X' Y'",
            "X' Y2",
            "",
            "Z' Y",
            "Z' Y'",
            "Z' Y2",
            "",
            "X2 Y",
            "X2 Y'"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Caso 1": {
        "modo": "Repeat",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+j+1.C-i-2.->no",
            "U.c+j.C-i-2.!=no",
            "U.c+i+2.c+j.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "U.c+j+1.C-i-2.==Up1",
            "",
            "",
            "F.c+i+2.c+j+1.->Fr2",
            "U.c+j.C-i-2.==Fr2"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+j+1:R.d F F.C-i-2:L.d F' F.c+j+1:R.u",
        "comment": "",
        "important": True
    },
    "STD Armar Laterales - Caso 2.1": {
        "modo": "Repeat",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+j+1.C-i-2.->no",
            "U.c+j.C-i-2.!=no",
            "U.c+i+2.c+j.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "U.c+j+1.C-i-2.==Up1",
            "",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+j+1:R.d F F.C-i-2:L.d F' F.c+j+1:R.u",
        "comment": "",
        "important": True
    },
    "STD Armar Laterales - Caso 2.2": {
        "modo": "Repeat",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+j+1.C-i-2.->no",
            "U.c+j.C-i-2.!=no",
            "U.c+i+2.c+j.!=Fr1",
            "",
            "F.c+i+2.c+j+1.->Fr2",
            "U.c+j.C-i-2.==Fr2"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "F",
            "F U",
            "F'",
            "F' U",
            "F2",
            "F2 U",
            "Y",
            "Y U",
            "Y F",
            "Y F U",
            "Y F'",
            "Y F' U",
            "Y F2",
            "Y F2 U",
            "Y'",
            "Y' U",
            "Y' F",
            "Y' F U",
            "Y' F'",
            "Y' F' U",
            "Y' F2",
            "Y' F2 U",
            "X'",
            "X' U",
            "X' F",
            "X' F U",
            "X' F'",
            "X' F' U",
            "X' F2",
            "X' F2 U",
            "X",
            "X U",
            "X F",
            "X F U",
            "X F'",
            "X F' U",
            "X F2",
            "X F2 U",
            "X2",
            "X2 U",
            "X2 F",
            "X2 F U",
            "X2 F'",
            "X2 F' U",
            "X2 F2",
            "X2 F2 U",
            "Z",
            "Z U",
            "Z F",
            "Z F U",
            "Z F'",
            "Z F' U",
            "Z F2",
            "Z F2 U",
            "Z'",
            "Z' U",
            "Z' F",
            "Z' F U",
            "Z' F'",
            "Z' F' U",
            "Z' F2",
            "Z' F2 U",
            "Y' Z",
            "Y' Z U",
            "Y' Z F",
            "Y' Z F U",
            "Y' Z F'",
            "Y' Z F' U",
            "Y' Z F2",
            "Y' Z F2 U",
            "Y Z'",
            "Y Z' U",
            "Y Z' F",
            "Y Z' F U",
            "Y Z' F'",
            "Y Z' F' U",
            "Y Z' F2",
            "Y Z' F2 U",
            "Z Y'",
            "Z Y' U",
            "Z Y' F",
            "Z Y' F U",
            "Z Y' F'",
            "Z Y' F' U",
            "Z Y' F2",
            "Z Y' F2 U",
            "Z' Y",
            "Z' Y U",
            "Z' Y F",
            "Z' Y F U",
            "Z' Y F'",
            "Z' Y F' U",
            "Z' Y F2",
            "Z' Y F2 U"
        ],
        "algoritmo": "F.c+j+1:R.d F F.C-i-2:L.d F' F.c+j+1:R.u",
        "comment": "",
        "important": True
    },
    "STD Armar Laterales - Complemento 1": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "STD Armar Laterales - Complemento 1 - U",
            "STD Armar Laterales - Complemento 1 - F 1",
            "STD Armar Laterales - Complemento 1 - F 2",
            "STD Armar Laterales - Complemento 1 - F 3",
            "STD Armar Laterales - Complemento 1 - R >< L",
            "STD Armar Laterales - Complemento 1 - L >< R",
            "STD Armar Laterales - Complemento 1 - B",
            "STD Armar Laterales - Complemento 1 - D"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - B": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "B.c+j+1.C-i-2.==Fr1",
            "B.c+j.C-i-2.!=Fr1",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "B",
            "B'",
            "B2"
        ],
        "algoritmo": "B.C-i-2:L.u U",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - D": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "D.c+j+1.C-i-2.==Fr1",
            "D.c+j.C-i-2.!=Fr1",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "D",
            "D'",
            "D2"
        ],
        "algoritmo": "D.C-i-2:L.2u U'",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - U": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "U.c+i+2.c+j.!=Fr1",
            "U.c+i+2.c+j+1.==Fr1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "U",
            "U'",
            "U2"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - F 1": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "F.C-j.c+i+2.!=Fr1",
            "F.C-j-1.c+i+2.==Fr1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "F.c+i+2:R.u U",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - F 2": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "F.c+j.C-i-2.!=Fr1",
            "F.c+j+1.C-i-2.==Fr1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "F.C-i-2:L.u U'",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - F 3": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "F.C-i-2.C-j.!=Fr1",
            "F.C-i-2.C-j-1.==Fr1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "F F.c+i+2:R.u U F'",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [
            "STD Armar Laterales - Complemento 2 - B",
            "STD Armar Laterales - Complemento 2 - D",
            "STD Armar Laterales - Complemento 2 - R >< L",
            "STD Armar Laterales - Complemento 2 - L >< R",
            "STD Armar Laterales - Complemento 2 - F 1",
            "STD Armar Laterales - Complemento 2 - F 2",
            "STD Armar Laterales - Complemento 2 - F 3",
            "STD Armar Laterales - Complemento 2 - U 1",
            "STD Armar Laterales - Complemento 2 - U 2"
        ],
        "until1st": "Success",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - B": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR B.C-j.c+i+2.==Fr2, B.C-j-1.c+i+2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "B",
            "B'",
            "B2"
        ],
        "algoritmo": "B.c+i+2:R.u",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - D": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR D.c+j.C-i-2.==Fr2, D.c+j+1.C-i-2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "D",
            "D'",
            "D2"
        ],
        "algoritmo": "D.C-i-2:L.2u",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - F 1": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR F.c+j.C-i-2.==Fr2, F.c+j+1.C-i-2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "F.C-i-2:L.u",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - F 2": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR F.C-i-2.C-j.==Fr2, F.C-i-2.C-j-1.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "F' F.C-i-2:L.u F",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - F 3": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR F.C-j.c+i+2.==Fr2, F.C-j-1.c+i+2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "F2 F.C-i-2:L.u F2",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - U 1": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR U.C-i-2.C-j.==Fr2, U.C-i-2.C-j-1.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "U' F.C-i-2:L.d U F.C-i-2:L.u",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - U 2": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR U.C-j.c+i+2.==Fr2, U.C-j-1.c+i+2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "",
            "",
            ""
        ],
        "algoritmo": "U2 F.C-i-2:L.d U2 F.C-i-2:L.u",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Caso 3.1": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "",
            "",
            "F.c+i+2.c+j+1.!=Fr1",
            "U.c+i+2.c+j.!=Fr1",
            "",
            "",
            "U.c+i+2.c+j.->Up1",
            "U.c+j+1.C-i-2.==Up1",
            "",
            "",
            "F.c+i+2.c+j+1.->Fr2",
            "U.c+j.C-i-2.==Fr2"
        ],
        "mirror": True,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.c+j+1:R.d F F.C-i-2:L.d F' F.c+j+1:R.u",
        "comment": "",
        "important": True
    },
    "STD Armar Laterales - Caso 3.2": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "",
            "",
            "F.c+i+2.c+j+1.!=Fr1",
            "U.c+i+2.c+j.!=Fr1",
            "",
            "",
            "U.c+i+2.c+j.->Up1",
            "U.c+j+1.C-i-2.==Up1",
            "",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.c+j+1:R.d F F.C-i-2:L.d F' F.c+j+1:R.u",
        "comment": "",
        "important": True
    },
    "STD Armar Laterales - Caso 3.3": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "",
            "",
            "F.c+i+2.c+j+1.!=Fr1",
            "U.c+i+2.c+j.!=Fr1",
            "",
            "",
            "F.c+i+2.c+j+1.->Fr2",
            "U.c+j.C-i-2.==Fr2"
        ],
        "mirror": True,
        "posiciones": [
            "-"
        ],
        "algoritmo": "F.c+j+1:R.d F F.C-i-2:L.d F' F.c+j+1:R.u",
        "comment": "",
        "important": True
    },
    "STD Centros 1": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "0:0",
        "rangoJ": "",
        "rangoK": "0:0",
        "subMetodos": [
            "STD Nucleos",
            "STD Acomodar Laterales",
            "STD Acomodar Esquinas",
            "Check Centros 1"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Centros 2": {
        "modo": "Once",
        "minLado": 6,
        "subMetodos": [
            "STD Armar Laterales",
            "STD Acomodar Laterales",
            "STD Acomodar Esquinas",
            "Check Centros 2"
        ],
        "until1st": "-",
        "listaCondiciones": [],
        "mirror": False,
        "posiciones": [],
        "algoritmo": "",
        "comment": "",
        "important": False,
        "rangoI": "0:C-4",
        "rangoJ": "",
        "rangoK": "1:1"
    },
    "Check Centros 2": {
        "modo": "Once",
        "minLado": 5,
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->up",
            "U.t:b.l:r.==up",
            "D.c.c.->dn",
            "D.t:b.l:r.==dn",
            "F.c.c.->fr",
            "F.t:b.l:r.==fr",
            "B.c.c.->bk",
            "B.t:b.l:r.==bk",
            "L.c.c.->lf",
            "L.t:b.l:r.==lf",
            "R.c.c.->rg",
            "R.t:b.l:r.==rg"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "Check Centros 1": {
        "modo": "Once",
        "minLado": 4,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "U.c.c.->up",
            "U.C-1:c+1.C-1:c+1.==up",
            "D.c.c.->dn",
            "D.C-1:c+1.C-1:c+1.==dn",
            "F.c.c.->fr",
            "F.C-1:c+1.C-1:c+1.==fr",
            "B.c.c.->bk",
            "B.C-1:c+1.C-1:c+1.==bk",
            "L.c.c.->lf",
            "L.C-1:c+1.C-1:c+1.==lf",
            "R.c.c.->rg",
            "R.C-1:c+1.C-1:c+1.==rg"
        ],
        "mirror": False,
        "posiciones": [
            "-"
        ],
        "algoritmo": "",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - R >< L": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "R.C-j-1.c+i+2.==Fr1",
            "R.C-j.c+i+2.!=Fr1",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "R",
            "R'",
            "R2",
            "",
            "L",
            "L'",
            "L2"
        ],
        "algoritmo": "R.c+i+2:R.u U2",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 1 - L >< R": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "",
            "L.c+j+1.C-i-2.==Fr1",
            "L.c+j.C-i-2.!=Fr1",
            ""
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "L",
            "L'",
            "L2",
            "",
            "R",
            "R'",
            "R2"
        ],
        "algoritmo": "L.C-i-2:L.u U2",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - R >< L": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR R.C-j.c+i+2.==Fr2, R.C-j-1.c+i+2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "R",
            "R'",
            "R2",
            "",
            "L",
            "L'",
            "L2"
        ],
        "algoritmo": "U R.c+i+2:R.u U'",
        "comment": "",
        "important": False
    },
    "STD Armar Laterales - Complemento 2 - L >< R": {
        "modo": "Once",
        "minLado": 6,
        "rangoI": "",
        "rangoJ": "",
        "rangoK": "",
        "subMetodos": [],
        "until1st": "-",
        "listaCondiciones": [
            "F.c+i+2.c+j.->Fr1",
            "U.c+i+2.c+j+1.==Fr1",
            "F.c+i+2.c+j+1.!=Fr1",
            "",
            "U.c+i+2.c+j.->Up1",
            "F.c+i+2.c+j+1.->Fr2",
            "",
            "",
            "OR L.c+j.C-i-2.==Fr2, L.c+j+1.C-i-2.==Up1"
        ],
        "mirror": True,
        "posiciones": [
            "-",
            "L",
            "L'",
            "L2",
            "",
            "R",
            "R'",
            "R2"
        ],
        "algoritmo": "U L.C-i-2:L.u U'",
        "comment": "",
        "important": False
    }
}
